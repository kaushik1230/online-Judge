{"version":3,"file":"static/js/290.c096a502.chunk.js","mappings":"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","sources":["webpack://oj-client/./src/pages/LeaderBoard/LeaderTable/LeaderTable.module.css?d080","pages/LeaderBoard/LeaderTable/LeaderTable.js","pages/LeaderBoard/LeaderBoard.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"succRow\":\"LeaderTable_succRow__zo3za\",\"errRow\":\"LeaderTable_errRow__gSclM\",\"headRow\":\"LeaderTable_headRow__paYsu\",\"quesRow\":\"LeaderTable_quesRow__IJc2M\"};","import React, { useState } from 'react';\nimport { useNavigate } from 'react-router';\n\nimport {\n    Table,\n    Paper,\n    Button,\n    TableRow,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableContainer,\n    TablePagination,\n} from '@mui/material';\n\nimport moment from 'moment';\nimport classes from './LeaderTable.module.css'\nimport CodeIcon from '@mui/icons-material/Code';\n\nconst columns = [\n    {\n        id: 'quesName',\n        label: 'Question Name',\n        align: 'center',\n    },\n    {\n        id: 'username',\n        label: 'Username',\n        align: 'center'\n    },\n    {\n        id: 'status',\n        label: 'Status',\n        align: 'center'\n    },\n    {\n        id: 'msg',\n        label: 'Message',\n        align: 'center'\n    },\n    {\n        id: 'time',\n        label: 'Total Time(s)',\n        align: 'center',\n        format: (value) => value.toFixed(2),\n    },\n    {\n        id: 'language',\n        label: 'Language',\n        align: 'center',\n    },\n    {\n        id: 'submitTime',\n        label: 'Submit Time',\n        align: 'center',\n    },\n    {\n        id: 'code',\n        label: 'Code',\n        align: 'center'\n    }\n];\n\nconst createData = leaders => {\n    let { quesName, status, language, submitTime, completeTime, startTime, quesId, output, username, codeId } = leaders;\n\n    // if some of data is missing then fix them with some default values\n    (quesName === undefined || quesName === null) && (quesName = 'Binary Search');\n    (quesId === undefined || quesId === null) && (quesId = '62d2def98f76467879c21e29');\n    (username === undefined || username === null) && (username = 'guest');\n\n    const time = Math.abs(new Date(completeTime) - new Date(startTime)) / 1000;\n    submitTime = moment(submitTime).fromNow();\n    status === 'pending' ? (status = 'Pending') : (status === 'success' ? (status = 'Accepted') : (status = 'Rejected'));\n\n    return { quesName, status, language, time, submitTime, quesId, msg: ((!output || !output.msg) ? 'NA' : output.msg), username, codeId };\n}\n\nconst LeaderTable = props => {\n    const { leaders } = props;\n    const NavigateFunction = useNavigate();\n\n    const rows = leaders.map(createData);\n\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    return (\n        <Paper sx={{ width: '100%', overflow: 'hidden' }}>\n            <TableContainer sx={{ maxHeight: '80vh' }}>\n                <Table stickyHeader aria-label=\"sticky table\">\n                    <TableHead>\n                        <TableRow>\n                            {columns.map((column) => (\n                                <TableCell\n                                    key={column.id}\n                                    align={column.align}\n                                    style={{ minWidth: column.minWidth, backgroundColor: 'rgb(38, 45, 51)', color: 'rgba(240,240,240, 0.9)' }}\n                                >\n                                    {column.label}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map((row, index) => {\n                                return (\n                                    <TableRow\n                                        hover\n                                        role=\"checkbox\"\n                                        tabIndex={-1}\n                                        key={index}\n                                        className={classes[(row.status === 'Accepted' ? 'succRow' : (row.status === 'Rejected' ? 'errRow' : ''))]}\n                                    >\n                                        {columns.map(column => {\n                                            const value = row[column.id];\n                                            return (\n                                                <TableCell\n                                                    key={column.id}\n                                                    align={column.align}\n                                                    role={column.id === 'quesName' ? 'link' : 'cell'}\n                                                    onClick={column.id === 'quesName' ? () => NavigateFunction(`/questions/${row.quesId}`) : null}\n                                                    className={classes[(column.id === 'quesName' ? 'quesRow' : '')]}\n                                                >\n                                                    {column.id === 'code' ? (\n                                                        <Button\n                                                            variant=\"contained\"\n                                                            onClick={() => NavigateFunction(`/codes/${row.quesId}${row.codeId ? ('?codeId=' + row.codeId) : ''}`)}\n                                                        >\n                                                            <CodeIcon />\n                                                        </Button>\n                                                    ) : (\n                                                        column.format\n                                                            ? column.format(value)\n                                                            : value\n                                                    )}\n                                                </TableCell>\n                                            );\n                                        })}\n                                    </TableRow>\n                                );\n                            })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <TablePagination\n                rowsPerPageOptions={[10, 30, 50, 80, 100]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n        </Paper >\n    );\n}\n\nexport default LeaderTable;","import React, { Fragment, useEffect, useState } from 'react';\nimport { SERVER_LINK } from '../../dev-server-link';\n\nimport LeaderTable from './LeaderTable/LeaderTable';\nimport LoadingSpinner from '../../compenents/LoadingSpinner/LoadingSpinner';\nimport { errorFormatter } from '../../utils';\n\nconst LeaderBoard = () => {\n\n    const { loading, error, leaders } = useFetchLeader();\n\n    return (\n        <Fragment>\n            {loading && <LoadingSpinner />}\n            {!loading && error && (<div>\n                <div className='errorTemplate'>\n                    <div><span>Msg : </span>Wasn't able to connect to server check if your are not offline or server might not be working !</div>\n                    {error && <div><span>Error : </span>{errorFormatter(error)}</div>}\n                </div>\n            </div>)}\n            {!loading && !error && (\n                <LeaderTable leaders={[...leaders]} />\n            )}\n        </Fragment>\n    )\n}\n\nconst useFetchLeader = () => {\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(undefined);\n    const [leaders, setLeaders] = useState(undefined);\n\n    useEffect(() => {\n        fetch(\n            `${SERVER_LINK}/api/explore/leaderboard`,\n            {\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                method: 'GET'\n            }\n        )\n            .then(response => {\n                if (response.ok) return response.json();\n                return Promise.reject(response);\n            })\n            .then(response => setLeaders(response))\n            .catch(setError)\n            .finally(() => setLoading(false))\n    }, []);\n\n    return { loading, error, leaders };\n}\n\n\nexport default LeaderBoard;"],"names":["columns","id","label","align","format","value","toFixed","createData","leaders","quesName","status","language","submitTime","completeTime","startTime","quesId","output","username","codeId","undefined","time","Math","abs","Date","moment","fromNow","msg","props","NavigateFunction","useNavigate","rows","map","page","setPage","useState","rowsPerPage","setRowsPerPage","_jsxs","Paper","sx","width","overflow","children","_jsx","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","column","TableCell","style","minWidth","backgroundColor","color","TableBody","slice","row","index","hover","role","tabIndex","className","classes","onClick","Button","variant","CodeIcon","TablePagination","rowsPerPageOptions","component","count","length","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","target","useFetchLeader","loading","setLoading","error","setError","setLeaders","useEffect","fetch","SERVER_LINK","headers","method","then","response","ok","json","Promise","reject","catch","finally","LeaderBoard","Fragment","LoadingSpinner","errorFormatter","LeaderTable"],"sourceRoot":""}