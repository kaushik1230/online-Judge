{"version":3,"file":"static/js/141.60a81dd2.chunk.js","mappings":"gIACA,SAAgB,IAAM,oBAAoB,QAAU,wBAAwB,KAAO,qBAAqB,KAAO,qBAAqB,MAAQ,sBAAsB,OAAS,wB,0BCG3K,MASA,EATeA,IACX,MAAMC,EAAUD,EAAME,QAAUF,EAAME,QAAU,OAChD,OACIC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACF,QAASD,EAASI,GAAIL,EAAMK,GAAIC,UAAY,GAAEC,EAAQC,OAAOD,EAAQP,EAAMS,SAASC,UACtFP,EAAAA,EAAAA,KAAA,QAAAO,SAAOV,EAAMU,YACT,C,yICKhB,MA2DA,EA3DqBV,IAEjB,MAAM,KAAEW,EAAI,QAAEC,EAAO,SAAEC,EAAQ,SAAEC,EAAQ,WAAEC,GAAa,EAAK,UAAEC,GAAY,GAAUhB,EAErF,IAAIiB,EAAO,QACX,OAAQJ,GACJ,IAAK,IAGL,IAAK,MAYL,QACII,EAAO,cAVX,IAAK,OACDA,EAAO,OACP,MACJ,IAAK,KACDA,EAAO,SACP,MACJ,IAAK,KACDA,EAAO,aAMf,OACIC,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAT,SAAA,CACJM,IAAaE,EAAAA,EAAAA,MAAA,OAAKE,MAAO,CAAEC,SAAU,WAAYC,OAAQ,GAAIC,QAAS,OAAQC,WAAY,SAAUC,cAAe,OAAQC,UAAW,UAAWhB,SAAA,EAC9IP,EAAAA,EAAAA,KAAA,OAAKG,UAAU,UACfH,EAAAA,EAAAA,KAAA,QAAMiB,MAAO,CAAEN,SAAU,SAAUL,MAAO,2BAA4BkB,WAAY,IAAKC,WAAY,QAASlB,SAAC,wBAEjHP,EAAAA,EAAAA,KAAC0B,EAAAA,GAAS,CACNC,YAAY,uBACZb,KAAMA,EACNc,MAAM,UACNC,KAAK,WACLC,OAAQA,OAGRC,SAAUC,GAASvB,EAAQuB,GAC3BrB,SAAUsB,SAAStB,GACnBuB,iBAAiB,EACjBC,YAAY,EACZC,SAAUxB,EACVyB,qBAAqB,EACrBL,MAAOxB,EACP8B,MAAM,OACNC,WAAY,CACRC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,gBAAgB,EAChBC,iBAAiB,EACjBC,QAAS,OAGV,C,uNC5DnB,MAAMC,GAAQC,EAAAA,EAAAA,IAAOC,EAAAA,EAAU;;EA2D/B,EAvDoBC,IAAyD,IAAtDC,aAAcjB,EAAOkB,gBAAiBC,GAAUH,EAoBnE,OACIhD,EAAAA,EAAAA,KAACoD,EAAAA,EAAG,CAACC,GAAI,CAAEf,MAAO,IAAKgB,YAAa,QAAS/C,UACzCQ,EAAAA,EAAAA,MAACwC,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGpC,WAAW,SAAQd,SAAA,EAC3CP,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACG,MAAI,EAAAnD,UACNP,EAAAA,EAAAA,KAAC2D,EAAAA,EAAU,OAEf3D,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACG,MAAI,EAACE,IAAE,EAAArD,UACTP,EAAAA,EAAAA,KAAC6D,EAAAA,GAAM,CACH7B,MAAOA,EACPD,SAzBO+B,CAACC,EAAOC,KAC/Bb,EAASa,EAAS,EAyBF,kBAAgB,eAChBC,IA7BQ,EA8BRC,IA9BL,QAiCHlE,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAACG,MAAI,EAAAnD,UACNP,EAAAA,EAAAA,KAAC6C,EAAK,CACFb,MAAOA,EACPmC,KAAK,QACLpC,SA/BOgC,IACvBZ,EAAgC,KAAvBY,EAAMK,OAAOpC,MAAe,GAAKqC,OAAON,EAAMK,OAAOpC,OAAO,EA+BrDsC,OA5BDC,KACXvC,EAXoB,EAYpBmB,EAZoB,GAabnB,EAbA,IAcPmB,EAdO,GAeX,EAwBgBqB,WAAY,CACRC,KAAM,GACNR,IAzCI,EA0CJC,IA1CT,GA2CSQ,KAAM,SACN,kBAAmB,wBAKjC,E,eC/Dd,SAAgB,cAAgB,+BAA+B,cAAgB,+BAA+B,YAAc,6BAA6B,WAAa,4BAA4B,UAAY,4BCgG9M,EAzFgB7E,IAEZ,MAAM,SACF8E,EAAQ,UACRC,EAAS,gBACTC,EAAe,aACf5B,EAAY,aACZ6B,EAAY,aACZC,EAAY,gBACZ7B,EAAe,gBACf8B,EAAe,qBACfC,GACApF,GAEGqF,EAAYC,IAAoBC,EAAAA,EAAAA,WAAS,GAEhD,OACIrE,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAT,SAAA,EACLQ,EAAAA,EAAAA,MAACsE,EAAAA,EAAG,CAACpE,MAAO0D,EAAU5E,QAASA,IAAMoF,GAAiBG,IAASA,IAAOhF,MAAM,YAAY,aAAW,MAAKC,SAAA,EACpGP,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,EAAQmF,cACpBtE,MAAO,CACHuE,IAAK,UACLC,WAAY,SACZC,cAAe,aACjBnF,SACL,sCAGDP,EAAAA,EAAAA,KAAC2F,EAAAA,EAAQ,QAEb3F,EAAAA,EAAAA,KAAC4F,EAAAA,GAAM,CACHC,OAAO,QACPC,KAAMZ,EACNa,QAASA,IAAMZ,GAAiB,GAAO5E,UAEvCQ,EAAAA,EAAAA,MAAA,OAAKE,MAAO,CAAEqB,MAAO,QAAS0D,OAAQ,QAASzF,SAAA,EAC3CP,EAAAA,EAAAA,KAAA,MAAIG,UAAWC,EAAQ6F,cAAc1F,SAAE,aAGvCP,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,EAAQ8F,YAAY3F,SAAC,oBAGrCP,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,EAAQ+F,WAAW5F,UAC/BP,EAAAA,EAAAA,KAACoG,EAAW,CAACnD,aAAcA,EAAcC,gBAAiBA,MAE7D6B,IACGhE,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAT,SAAA,EACLP,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,EAAQiG,WAAW9F,UAC/BQ,EAAAA,EAAAA,MAACuF,EAAAA,EAAW,CAAA/F,SAAA,EACRP,EAAAA,EAAAA,KAACuG,EAAAA,EAAU,CAACC,GAAG,0BAAyBjG,SAAC,cACzCQ,EAAAA,EAAAA,MAAC0F,EAAAA,EAAM,CACHC,QAAQ,0BACRF,GAAG,oBACHxE,MAAO8C,EACP6B,MAAM,WACN1F,MAAO,CAAEqB,MAAO,MAAOsE,OAAQ,SAC/B7E,SAAU8E,GAAK7B,EAAgB6B,EAAEzC,OAAOpC,OAAOzB,SAAA,EAE/CP,EAAAA,EAAAA,KAAC8G,EAAAA,EAAQ,CAAC9E,MAAO,IAAIzB,SAAC,OACtBP,EAAAA,EAAAA,KAAC8G,EAAAA,EAAQ,CAAC9E,MAAO,MAAMzB,SAAC,SACxBP,EAAAA,EAAAA,KAAC8G,EAAAA,EAAQ,CAAC9E,MAAO,KAAKzB,SAAC,YACvBP,EAAAA,EAAAA,KAAC8G,EAAAA,EAAQ,CAAC9E,MAAO,OAAOzB,SAAC,UACzBP,EAAAA,EAAAA,KAAC8G,EAAAA,EAAQ,CAAC9E,MAAO,KAAKzB,SAAC,gBAKnCP,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,EAAQwE,UAAUrE,UAC9BP,EAAAA,EAAAA,KAAC+G,EAAAA,EAAM,CAACzG,MAAM,QAAQP,QAASA,KAAQ6E,IAAaO,GAAiB,EAAM,EAAK6B,QAAQ,YAAYC,WAChGjH,EAAAA,EAAAA,KAACkH,EAAAA,EAAc,CAACvG,SAAS,QAAQM,MAAO,CAAEqC,YAAa,QAAS3C,SAAU,SAC5EM,MAAO,CAAEyE,cAAe,cAAenF,SAAC,gBAI7C0E,IACGlE,EAAAA,EAAAA,MAACgG,EAAAA,EAAM,CAACzG,MAAM,OAAOP,QAASA,KAAQ8E,IAAmBM,GAAiB,EAAM,EAAK6B,QAAQ,YAAYC,WACrGjH,EAAAA,EAAAA,KAACkH,EAAAA,EAAc,CAACvG,SAAS,QAAQM,MAAO,CAAEqC,YAAa,QAAS3C,SAAU,SAC5EM,MAAO,CAAEyE,cAAe,cAAenF,SAAA,CAAC,oBACtBP,EAAAA,EAAAA,KAAA,QAAMiB,MAAO,CAAEyE,cAAe,aAAcnF,SAAEuE,iBAO/E,C,0EC5FnB,QAA0B,0BAA1B,EAA2D,uBAA3D,EAA6H,uBAA7H,EAA8J,0BAA9J,EAAuM,+BAAvM,EAA8O,wBAA9O,EAA6Q,uBAA7Q,EAA2S,uBAA3S,EAAyU,uBAAzU,EAAuW,uBAAvW,EAAwY,0BAAxY,EAA2a,yBAA3a,EAAid,6BAAjd,EAA0f,4BAA1f,EAAgiB,0BAAhiB,EAAikB,uBAAjkB,EAA0oB,8BAA1oB,EAAmrB,2BAAnrB,EAAwtB,0BAAxtB,EAAgwB,8B,0BCChwB,MAcA,EAdwBqC,CAACC,EAAKC,KAC1B,MAAOrF,EAAOmB,IAAYiC,EAAAA,EAAAA,WAAS,KAC/B,MAAMkC,EAAYC,aAAaC,QAAQJ,GACvC,OAAiB,MAAbE,EAA0BG,KAAKC,MAAMJ,GAClCD,CAAY,IAOvB,OAJAM,EAAAA,EAAAA,YAAU,KACNJ,aAAaK,QAAQR,EAAKK,KAAKI,UAAU7F,GAAO,GACjD,CAACoF,EAAKpF,IAEF,CAACA,EAAOmB,EAAS,E,+CCb5B,MAgDA,EARqB,CACjB2E,EA9BC,uFA+BDC,IAzCC,wHA0CDC,GAnBC,yBAoBDC,GAxBC,+BAyBDC,KAjBC,oU,eC5BL,MCGaC,EAAc,CACvBC,IDgOQ,CAAEN,EApOH,g3BAoOMC,IArLJ,m1BAqLSG,KAtIR,qjCAsIcF,GAhGhB,qeAgGoBC,GA9DpB,yrD,0BEpJZ,MA+NMI,EAAmB7B,IACrB,MAAO8B,EAASC,IAAcnD,EAAAA,EAAAA,WAAS,IAChCoD,EAAOC,IAAYrD,EAAAA,EAAAA,eAASsD,IAC5BC,EAAUC,IAAexD,EAAAA,EAAAA,eAASsD,GAGnCG,GAAWC,EAAAA,EAAAA,KAAYC,GAASA,EAAMC,YAkB5C,OAhBArB,EAAAA,EAAAA,YAAU,KAKN,GAJAY,GAAW,GACXE,OAASC,GACTE,OAAYF,IAEPG,EAAShI,UAAW,CAErB,MAAMoI,EAAeJ,EAASG,UAAUE,MAAKlH,GAASA,EAAMmH,MAAQ3C,IAChEyC,EAAcL,EAAYK,GACzBR,EAAU,kCAAiCjC,KAEhD+B,GAAW,EACf,IAED,CAAC/B,EAAIqC,IAED,CAAEP,UAASE,QAAOG,WAAU,EAgDjCS,EAAiB,WAAwB,IAAvBC,EAAYC,UAAAC,OAAA,QAAAb,IAAAY,UAAA,GAAAA,UAAA,GAAG,IACnC3B,EAAAA,EAAAA,YAAU,KACN6B,OAAOC,SAAS,EAAG,EAAE,GAEtBJ,EACP,EAGA,EA/SiBK,KAEbN,IAEA,MAAM,GAAE5C,IAAOmD,EAAAA,EAAAA,OAET,QAAErB,EAAO,MAAEE,EAAK,SAAEG,GAAaN,EAAiB7B,IAG/CoD,EAAqBC,IAA0BzE,EAAAA,EAAAA,UAAS,oBAExDnC,EAAcC,IAAmBkC,EAAAA,EAAAA,UAAS,KAC1CN,EAAcE,GAAmBmC,EAAgB,iBAAkB,QACnE3G,EAAMC,IAAW2E,EAAAA,EAAAA,UAAS0E,EAAahF,KACvCiF,EAAUC,IAAe5E,EAAAA,EAAAA,UAAS,IAEnC6E,GAASC,EAAAA,EAAAA,QAAO,MAoEtB,OACInJ,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAT,SAAA,CACJ+H,IAAWtI,EAAAA,EAAAA,KAACmK,EAAAA,EAAc,KACzB7B,GAAWE,IAAUxI,EAAAA,EAAAA,KAAA,OAAAO,UACnBQ,EAAAA,EAAAA,MAAA,OAAKZ,UAAU,gBAAeI,SAAA,EAC1BQ,EAAAA,EAAAA,MAAA,OAAAR,SAAA,EAAKP,EAAAA,EAAAA,KAAA,QAAAO,SAAM,WAAa,qGACvBiI,IAASzH,EAAAA,EAAAA,MAAA,OAAAR,SAAA,EAAKP,EAAAA,EAAAA,KAAA,QAAAO,SAAM,aAAgBkH,KAAKI,UAAUW,YAG1DF,IAAYE,IACVzH,EAAAA,EAAAA,MAAA,OAAKZ,UAAWC,EAAgBG,SAAA,EAC5BQ,EAAAA,EAAAA,MAAA,OAAKZ,UAAWC,EAAaG,SAAA,EACzBP,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,EAAoBG,SAAC,+BAGrCQ,EAAAA,EAAAA,MAACqJ,EAAAA,EAAY,CAAClK,GAAG,aAAaI,MAAM,SAAQC,SAAA,EACxCP,EAAAA,EAAAA,KAACqK,EAAAA,EAAa,CAACpJ,MAAO,CAAEqC,YAAa,QAASgH,UAAW,oBAAqB3J,SAAU,WAAa,cAI7GX,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,EAAaG,UACzBQ,EAAAA,EAAAA,MAAA,OAAKE,MAAO,CAAEG,QAAS,gBAAiBb,SAAA,EACpCP,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,EAAgBG,SAAEoI,EAAS9G,QAC3Cd,EAAAA,EAAAA,MAAA,OAAKZ,UAAWC,EAAqBG,SAAA,EACjCP,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,EAAe,aAAYuI,EAAS4B,WAAWhK,SAAEoI,EAAS4B,cAC1ExJ,EAAAA,EAAAA,MAAA,OAAKZ,UAAWC,EAAaG,SAAA,CAA2B,IAAzBoI,EAAS6B,YAAoB,GAAM7B,EAAS6B,YAAc7B,EAAS8B,SAAW,KAAKC,QAAQ,GAAI,KAAC1K,EAAAA,EAAAA,KAAA,QAAAO,SAAM,iBACrIQ,EAAAA,EAAAA,MAAA,OAAKZ,UAAWC,EAAaG,SAAA,CAAEoI,EAAS8B,SAAS,KAACzK,EAAAA,EAAAA,KAAA,QAAAO,SAAM,4BAIpEQ,EAAAA,EAAAA,MAAA,OAAKZ,UAAWC,EAAgBG,SAAA,EAC5BP,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,EAAaG,UACzBP,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,EAAaG,SACxBoI,EAASgC,gBAGjBhC,EAASiC,SAASC,KAAI,CAACC,EAASC,KAC7B/K,EAAAA,EAAAA,KAAA,OAAiBG,UAAWC,EAAaG,UACrCQ,EAAAA,EAAAA,MAAA,OAAKZ,UAAWC,EAAiB4K,IAAKD,EAAQ,EAAExK,SAAA,EAC5CQ,EAAAA,EAAAA,MAAA,OAAAR,SAAA,EAAKP,EAAAA,EAAAA,KAAA,QAAAO,SAAM,aAAgBuK,EAAQG,UACnClK,EAAAA,EAAAA,MAAA,OAAAR,SAAA,EAAKP,EAAAA,EAAAA,KAAA,QAAAO,SAAM,cAAiBuK,EAAQI,UACnCJ,EAAQK,eAAgBpK,EAAAA,EAAAA,MAAA,OAAAR,SAAA,EAAKP,EAAAA,EAAAA,KAAA,QAAAO,SAAM,oBAAuBuK,EAAQK,oBAJjEJ,MAQdhK,EAAAA,EAAAA,MAAA,OAAKZ,UAAWC,EAAeG,SAAA,EAC3BQ,EAAAA,EAAAA,MAAA,OAAKZ,UAAWC,EAAoBG,SAAA,CAAC,8BACHP,EAAAA,EAAAA,KAAA,QAAMiB,MAAO,CAAEX,MAAO,MAAOoF,cAAe,aAAcnF,SAAEuE,IAAoB,UAGlH9E,EAAAA,EAAAA,KAACoL,EAAAA,EAAO,CACJzG,SAAU,CACNxD,OAAQ,MACRD,SAAU,WACVsE,IAAK,QACL6F,MAAO,OAEXzG,UAhEVA,KACdnE,EAAQqJ,EAAahF,GAAc,EAgEXA,aAAcA,EACd7B,aAAcA,EACd+B,gBAAiBA,EACjB9B,gBAAiBA,EACjB2B,gBAlEJA,KACpBpE,EAAQ0H,EAAYQ,EAAS2C,UAAUxG,GAAc,EAkE7BC,cAAY,EACZE,uBAAwBkD,EAAYQ,EAAS2C,aAGjDtL,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,EAAmBG,UAC/BP,EAAAA,EAAAA,KAACuL,EAAAA,EAAY,CACTzG,aAAcA,EACdtE,KAAMA,EACNC,QAASA,EACTC,SAAUoE,EACVnE,SAAUsC,UAItBlC,EAAAA,EAAAA,MAAA,OAAKZ,UAAWC,EAAkBG,SAAA,EAC9BQ,EAAAA,EAAAA,MAAA,OAAKZ,UAAWC,EAAoBG,SAAA,CAAC,QAER,eAAxBqJ,EACG,oBAA+C,oBAAxBA,EACnB,uBAAyB,qBAAsB,aAG3D7I,EAAAA,EAAAA,MAACqJ,EAAAA,EAAY,CAAClK,GAAG,IAAIH,QAvJvByL,UAGlB,GAFAzH,EAAM0H,iBAEsB,eAAxB7B,EAAJ,CAEA8B,QAAQC,IAAI,mBACZ9B,EAAuB,cAEvB,IACI,MAAM+B,QAAcC,MACf,GAAEC,EAAAA,0BAAoCtF,IACvC,CACIuF,QAAS,CACL,eAAgB,oBAEpBC,OAAQ,OACRC,YAAa,UACbC,KAAMzE,KAAKI,UAAU,CAAErH,OAAME,SAAUoE,EAAcwG,SAAU3C,EAAS2C,SAAUa,SAAUxD,EAAS9G,SAGvGuK,QAAkBR,EAAMS,OAG9B,GAFArC,EAAYoC,GAERR,EAAMU,GAAI,CACV,MAAMC,EAAaC,aAAYhB,UAC3B,MAAMzB,QAAiB8B,MAClB,GAAEC,EAAAA,wBAAkCM,EAAUK,UAC/C,CACIV,QAAS,CACL,eAAgB,oBAEpBC,OAAQ,QAGVU,QAAa3C,EAASsC,OACvBtC,EAASuC,GAKW,YAAhBI,EAAKC,SACVC,cAAcL,GACd1C,EAAuB,aACvBG,EAAY,IAAK0C,EAAKxB,OAAQyB,OAAQD,EAAKC,WAP3CC,cAAcL,GACd1C,EAAuB,aACvBG,EAAY0C,GAMhB,GAED,IACP,MAEI7C,EAAuB,aAG3BI,EAAO4C,QAAQC,eAAe,CAAEC,SAAU,SAAUC,MAAO,SAC/D,CAAE,MAAOxE,GACLwB,EAAY,CAAEiD,IAAK,iEAAkEC,YAAazF,KAAKI,UAAUW,KACjHqB,EAAuB,YAC3B,CArDgD,CAqDhD,EA+FiEvJ,MAAM,QAAOC,SAAA,CAC7B,eAAxBqJ,EAAuC,aAAe,SAC9B,eAAxBA,GAAuC5J,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,KAAmBJ,EAAAA,EAAAA,KAACmN,EAAAA,EAAQ,CAAClM,MAAO,CAAEQ,WAAY,QAASd,SAAU,iBAG5G,oBAAxBiJ,IACG5J,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,EAAaG,UACzBQ,EAAAA,EAAAA,MAAA,OAAKE,MAAO,CAAE,QAA8B,YAApB8I,EAAS4C,OAAuB,IAAM,GAAMxM,UAAWC,EAAiBG,SAAA,CAC3FwJ,EAASkD,MACNlM,EAAAA,EAAAA,MAAA,OAAKZ,UAAWC,EAAoBG,SAAA,EAChCP,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,EAAgBG,SAAC,WACjCP,EAAAA,EAAAA,KAAA,OAAAO,SAAMwJ,EAASkD,SAGtBlD,EAASqD,SACNrM,EAAAA,EAAAA,MAAA,OAAKZ,UAAWC,EAAoBG,SAAA,EAChCP,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,EAAgBG,SAAC,cACjCP,EAAAA,EAAAA,KAAA,OAAAO,SAAMwJ,EAASqD,YAGtBrD,EAASsD,SACNtM,EAAAA,EAAAA,MAAA,OAAKZ,UAAWC,EAAoBG,SAAA,EAChCP,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,EAAgBG,SAAC,cACjCP,EAAAA,EAAAA,KAAA,OAAAO,SAAMwJ,EAASsD,YAGtBtD,EAASvB,QACNzH,EAAAA,EAAAA,MAAA,OAAKZ,UAAWC,EAAoBG,SAAA,EAChCP,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,EAAgBG,SAAC,aACjCP,EAAAA,EAAAA,KAAA,OAAAO,SAAMkH,KAAKI,UAAUkC,EAASvB,YAGrCuB,EAASmD,cACNnM,EAAAA,EAAAA,MAAA,OAAKZ,UAAWC,EAAoBG,SAAA,EAChCP,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,EAAgBG,SAAC,mBACjCP,EAAAA,EAAAA,KAAA,OAAAO,SAAMwJ,EAASmD,YAAYI,gBAGd,YAApBvD,EAAS4C,SACN3M,EAAAA,EAAAA,KAAA,OAAKiB,MAAO,CAAEsM,UAAW,OAAQnM,QAAS,OAAQC,WAAY,SAAUmM,eAAgB,UAAWjN,UAC/FP,EAAAA,EAAAA,KAACmK,EAAAA,EAAc,eAOvCnK,EAAAA,EAAAA,KAAA,OAAK,iBAAYyN,IAAKxD,SAGtB,C,sBC1OhByD,EAAyBC,EAAQ,OAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,QAChDG,EAAcH,EAAQ,OACtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,iEACD,aACJN,EAAQ,EAAUG,C,sBCVdL,EAAyBC,EAAQ,OAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,QAChDG,EAAcH,EAAQ,OACtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,0CACD,QACJN,EAAQ,EAAUG,C","sources":["webpack://oj-client/./src/compenents/Button/Button.module.css?8b47","compenents/Button/Button.js","pages/Question/Editor/CodeEditorv3.js","compenents/InputSlider/InputSlider.js","webpack://oj-client/./src/pages/Question/Options/Options.module.css?dacc","pages/Question/Options/Options.js","webpack://oj-client/./src/pages/Question/Question.module.css?e453","hooks/useLocalStorage.js","pages/Question/defaultCodes/defaultCodes.js","pages/Question/correctCodes/bs0.js","pages/Question/correctCodes/index.js","pages/Question/Question.js","../node_modules/@mui/icons-material/ArrowBack.js","../node_modules/@mui/icons-material/Send.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"Button_btn__VOHjC\",\"skyblue\":\"Button_skyblue__fkwyM\",\"blue\":\"Button_blue__W74cS\",\"grey\":\"Button_grey__SSwSa\",\"green\":\"Button_green__L+Ioq\",\"yellow\":\"Button_yellow__CZ+xg\"};","import React from 'react'\nimport classes from './Button.module.css'\nimport { Link } from 'react-router-dom'\n\nconst Button = props => {\n    const handler = props.onClick ? props.onClick : () => { };\n    return (\n        <Link onClick={handler} to={props.to} className={`${classes.btn} ${classes[props.color]}`}>\n            <span>{props.children}</span>\n        </Link >\n    )\n}\n\nexport default Button;","import React, { Fragment } from 'react'\n\nimport AceEditor from 'react-ace'\n\nimport \"ace-builds/webpack-resolver\"\n\nimport 'ace-builds/src-noconflict/mode-javascript'\nimport 'ace-builds/src-noconflict/mode-c_cpp'\nimport 'ace-builds/src-noconflict/mode-java'\nimport 'ace-builds/src-noconflict/mode-python'\n\nimport 'ace-builds/src-noconflict/theme-monokai'\nimport 'ace-builds/src-noconflict/ext-language_tools'\n\nconst CodeEditorv3 = props => {\n\n    const { code, setCode, language, fontSize, isReadOnly = false, isLoading = false } = props;\n\n    let mode = 'c_cpp';\n    switch (language) {\n        case 'c':\n            mode = 'c_cpp';\n            break;\n        case 'cpp':\n            mode = 'c_cpp';\n            break;\n        case 'java':\n            mode = 'java';\n            break;\n        case 'py':\n            mode = 'python';\n            break;\n        case 'js':\n            mode = 'javascript';\n            break;\n        default:\n            mode = 'c_cpp';\n    }\n\n    return (\n        <Fragment>\n            {isLoading && <div style={{ position: 'absolute', zIndex: 10, display: 'flex', alignItems: 'center', pointerEvents: 'none', translate: '0 1rem' }}>\n                <div className='spin' />\n                <span style={{ fontSize: '1.8rem', color: 'rgba(128, 128, 128, 0.8)', fontWeight: 500, marginLeft: '1rem' }}>Loading Code...</span>\n            </div>}\n            <AceEditor\n                placeholder=\"Enter your code here\"\n                mode={mode}\n                theme=\"monokai\"\n                name=\"editorv3\"\n                onLoad={() => {\n                    // console.log('loaded')\n                }}\n                onChange={value => setCode(value)}\n                fontSize={parseInt(fontSize)}\n                showPrintMargin={false}\n                showGutter={true}\n                readOnly={isReadOnly}\n                highlightActiveLine={true}\n                value={code}\n                width='100%'\n                setOptions={{\n                    enableBasicAutocompletion: true,\n                    enableLiveAutocompletion: true,\n                    enableSnippets: false,\n                    showLineNumbers: true,\n                    tabSize: 4,\n                }}\n            />\n        </Fragment>\n    )\n}\n\nexport default CodeEditorv3;","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Slider from '@mui/material/Slider';\nimport MuiInput from '@mui/material/Input';\n\nimport TextFields from '@mui/icons-material/TextFields';\n\nconst Input = styled(MuiInput)`\n  width: 42px;\n`;\n\nconst InputSlider = ({ codeFontSize: value, setcodeFontSize: setValue }) => {\n\n    const maxVal = 50, minVal = 5;\n\n    const handleSliderChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const handleInputChange = (event) => {\n        setValue(event.target.value === '' ? '' : Number(event.target.value));\n    };\n\n    const handleBlur = () => {\n        if (value < minVal) {\n            setValue(minVal);\n        } else if (value > maxVal) {\n            setValue(maxVal);\n        }\n    };\n\n    return (\n        <Box sx={{ width: 250, marginRight: '1rem' }}>\n            <Grid container spacing={2} alignItems=\"center\">\n                <Grid item>\n                    <TextFields />\n                </Grid>\n                <Grid item xs>\n                    <Slider\n                        value={value}\n                        onChange={handleSliderChange}\n                        aria-labelledby=\"input-slider\"\n                        min={minVal}\n                        max={maxVal}\n                    />\n                </Grid>\n                <Grid item>\n                    <Input\n                        value={value}\n                        size=\"small\"\n                        onChange={handleInputChange}\n                        onBlur={handleBlur}\n                        inputProps={{\n                            step: 10,\n                            min: minVal,\n                            max: maxVal,\n                            type: 'number',\n                            'aria-labelledby': 'input-slider',\n                        }}\n                    />\n                </Grid>\n            </Grid>\n        </Box>\n    );\n}\n\nexport default InputSlider;","// extracted by mini-css-extract-plugin\nexport default {\"optionHeading\":\"Options_optionHeading__QPduD\",\"optionSnippet\":\"Options_optionSnippet__VcOrQ\",\"fontSnippet\":\"Options_fontSnippet__1MvPO\",\"changeFont\":\"Options_changeFont__XcTPt\",\"resetCode\":\"Options_resetCode__jKCaE\"};","import Settings from '@mui/icons-material/Settings'\nimport { Button, Drawer, Fab, FormControl, InputLabel, MenuItem, Select } from '@mui/material'\nimport React, { Fragment, useState } from 'react'\nimport InputSlider from '../../../compenents/InputSlider/InputSlider'\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\n\nimport classes from './Options.module.css';\n\nconst Options = props => {\n\n    const {\n        favStyle,\n        resetCode,\n        showCorrectCode,\n        codeFontSize,\n        selectedLang,\n        codeEditable,\n        setcodeFontSize,\n        setSelectedLang,\n        correctCodeAvailable\n    } = props;\n\n    const [drawerOpen, toggleDrawerOpen] = useState(false);\n\n    return (\n        <Fragment>\n            <Fab style={favStyle} onClick={() => toggleDrawerOpen(prev => !prev)} color=\"secondary\" aria-label=\"add\">\n                <div className={classes.optionSnippet}\n                    style={{\n                        top: '-1.5rem',\n                        whiteSpace: 'nowrap',\n                        textTransform: 'lowercase'\n                    }}\n                >\n                    &#60; change lang, font size, ... /&#62;\n                </div>\n                <Settings />\n            </Fab>\n            <Drawer\n                anchor='right'\n                open={drawerOpen}\n                onClose={() => toggleDrawerOpen(false)}\n            >\n                <div style={{ width: '15rem', margin: '1rem' }}>\n                    <h1 className={classes.optionHeading} >Options</h1>\n\n\n                    <div className={classes.fontSnippet}>\n                        &#60; Font Size /&#62;\n                    </div>\n                    <div className={classes.changeFont}>\n                        <InputSlider codeFontSize={codeFontSize} setcodeFontSize={setcodeFontSize} />\n                    </div>\n                    {codeEditable &&\n                        <Fragment>\n                            <div className={classes.changeLang}>\n                                <FormControl>\n                                    <InputLabel id=\"changeLang-select-label\">Language</InputLabel>\n                                    <Select\n                                        labelId=\"changeLang-select-label\"\n                                        id=\"changeLang-select\"\n                                        value={selectedLang}\n                                        label=\"Language\"\n                                        style={{ width: '8em', height: '2.8em' }}\n                                        onChange={e => setSelectedLang(e.target.value)}\n                                    >\n                                        <MenuItem value={'c'}>C</MenuItem>\n                                        <MenuItem value={'cpp'}>Cpp</MenuItem>\n                                        <MenuItem value={'py'}>Python</MenuItem>\n                                        <MenuItem value={'java'}>Java</MenuItem>\n                                        <MenuItem value={'js'}>Js</MenuItem>\n                                    </Select>\n                                </FormControl>\n                            </div>\n\n                            <div className={classes.resetCode}>\n                                <Button color=\"error\" onClick={() => { resetCode(); toggleDrawerOpen(false); }} variant='contained' startIcon={\n                                    <RestartAltIcon fontSize='large' style={{ marginRight: '0.5em', fontSize: '2em' }} />\n                                } style={{ textTransform: 'capitalize' }}>\n                                    ResetCode\n                                </Button>\n                            </div>\n                            {correctCodeAvailable &&\n                                <Button color=\"info\" onClick={() => { showCorrectCode(); toggleDrawerOpen(false); }} variant='contained' startIcon={\n                                    <RestartAltIcon fontSize='large' style={{ marginRight: '0.5em', fontSize: '2em' }} />\n                                } style={{ textTransform: 'capitalize' }}>\n                                    ShowCorrectCode.<span style={{ textTransform: 'lowercase' }}>{selectedLang}</span>\n                                </Button>\n                            }\n                        </Fragment>\n                    }\n                </div>\n            </Drawer>\n        </Fragment>\n    )\n}\n\nexport default Options","// extracted by mini-css-extract-plugin\nexport default {\"contain\":\"Question_contain__XfOxr\",\"back\":\"Question_back__1BV6K\",\"backbtn\":\"Question_backbtn__QvVie\",\"head\":\"Question_head__PAMDI\",\"heading\":\"Question_heading__QAhT-\",\"extraContent\":\"Question_extraContent__LXzq2\",\"level\":\"Question_level__ViyY2\",\"succ\":\"Question_succ__sIwQj\",\"subm\":\"Question_subm__6IvHH\",\"body\":\"Question_body__tT1Aa\",\"desc\":\"Question_desc__StH9-\",\"example\":\"Question_example__F7VL+\",\"editor\":\"Question_editor__3Cpeq\",\"editorText\":\"Question_editorText__kFTYK\",\"submitBtn\":\"Question_submitBtn__mI0v6\",\"notHead\":\"Question_notHead__k-dbk\",\"spin\":\"Question_spin__7XhOQ\",\"spinner\":\"Question_spinner__8T5cE\",\"codeSnippet\":\"Question_codeSnippet__+3kJb\",\"response\":\"Question_response__vZU6M\",\"resHead\":\"Question_resHead__8bXSF\",\"resTextHead\":\"Question_resTextHead__LMrmW\"};","import { useState, useEffect } from 'react';\n\nconst useLocalStorage = (key, initialValue) => {\n    const [value, setValue] = useState(() => {\n        const jsonValue = localStorage.getItem(key)\n        if (jsonValue != null) return JSON.parse(jsonValue)\n        return initialValue\n    })\n\n    useEffect(() => {\n        localStorage.setItem(key, JSON.stringify(value))\n    }, [key, value])\n\n    return [value, setValue]\n}\n\nexport default useLocalStorage;","const defaultCppCode =\n    `#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    cout << \"Hello World\" << endl;\n    return 0;\n}\n`;\n\nconst defaultCCode =\n    `#include <stdio.h>\nint main()\n{\n    printf(\"Hello World\\\\n\");\n    return 0;\n}\n`;\n\nconst defaultJsCode =\n    `console.log(\"Hello World\")\n`;\n\nconst defaultPythonCode =\n    `print(\"Hello World\")\n`;\n\nconst defaultJavaCode =\n    `// Don't make any public class,\n// use this Solution class because its main() function\n// will be called while compilation and execuation.\n// There must be Solution class in your java code !\n\nclass Solution {\n    public static void main(String[] args) {\n        System.out.println(\"Hello From Java\");\n    }\n}\n`;\n\nconst defaultCodes = {\n    c: defaultCCode,\n    cpp: defaultCppCode,\n    py: defaultPythonCode,\n    js: defaultJsCode,\n    java: defaultJavaCode,\n};\n\nexport default defaultCodes;\n","const c = `#include <stdio.h>\n#include <stdlib.h>\n\nint predicate(int x, int k)\n{\n    if (x > k)\n        return 1;\n    return 0;\n}\n\nint binarySearch(int arr[], int n, int k)\n{\n    // edge case\n    if (k < arr[0] || k > arr[n - 1])\n        return -1;\n\n    int l = 0, r = n - 1, m;\n    while (l < r - 1)\n    {\n        m = l + (r - l) / 2; // to avoid overflow\n        if (predicate(arr[m], k) == 0)\n            l = m;\n        else\n            r = m;\n    }\n    if (arr[l] == k)\n        return l;\n    // edge case: when ans is last element\n    if (arr[r] == k)\n        return r;\n    return -1;\n}\n\nint main()\n{\n    int n, k;\n    scanf(\"%d\", &n);\n    int *arr = (int *)calloc(n, sizeof(int));\n    for (int i = 0; i < n; ++i)\n        scanf(\"%d\", &arr[i]);\n    scanf(\"%d\", &k);\n    printf(\"%d\", binarySearch(arr, n, k));\n    free(arr);\n    return 0;\n}\n`;\n\nconst cpp = `#include <bits/stdc++.h>\n#define endl '\\\\n'\nusing namespace std;\n\nint predicate(int x, int k)\n{\n    if (x > k)\n        return 1;\n    return 0;\n}\n\nint binarySearch(vector<int> arr, int n, int k)\n{\n    // edge case\n    if (k < arr[0] || k > arr[n - 1])\n        return -1;\n\n    int l = 0, r = n - 1, m;\n    while (l < r - 1)\n    {\n        m = l + (r - l) / 2; // to avoid overflow\n        if (predicate(arr[m], k) == 0)\n            l = m;\n        else\n            r = m;\n    }\n    if (arr[l] == k)\n        return l;\n    // edge case: when ans is last element\n    if (arr[r] == k)\n        return r;\n    return -1;\n}\n\nint main()\n{\n    int n, k;\n    cin >> n;\n    vector<int> arr(n);\n    for (size_t i = 0; i < n; i++)\n        cin >> arr[i];\n    cin >> k;\n    cout << binarySearch(arr, n, k);\n    return 0;\n}\n`;\n\nconst java = `// Don't make any public class,\n// use this Solution class because its main() function\n// will be called while compilation and execuation.\n// There must be Solution class in your java code !\n\nimport java.util.Scanner;\n\nclass Solution {\n    public static int binarySearch(int[] arr, int first, int last, int key) {\n        int mid = (first + last) / 2;\n        while (first <= last) {\n            if (arr[mid] < key) {\n                first = mid + 1;\n            } else if (arr[mid] == key) {\n                return mid;\n            } else {\n                last = mid - 1;\n            }\n            mid = (first + last) / 2;\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n        int k = sc.nextInt();\n        sc.close();\n        int ans = binarySearch(arr, 0, n - 1, k);\n        System.out.println(ans);\n    }\n}\n`;\n\nconst py = `def binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n\n    while low <= high:\n\n        mid = (high + low) // 2\n\n        if arr[mid] < x:\n            low = mid + 1\n\n        elif arr[mid] > x:\n            high = mid - 1\n\n        else:\n            return mid\n\n    return -1\n\n\narr = []\nn = int(input())\n\nfor i in range(0, n):\n    ele = int(input())\n    arr.append(ele)\n\nx = int(input())\n\nresult = binary_search(arr, x)\nprint(result)\n`;\n\nconst js = `// ##############################################################################\n'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\\\n').map(string => {\n        return string.trim();\n    });\n\n    main();\n});\n\n// this function will help in taking input\nfunction readline() {\n    return inputString[currentLine++];\n}\n// ##############################################################################\n// Make a Snippet for the code above this and then write your logic in main();\n\nfunction main() {\n    // remember in our platform for a test case a input is given as a single line\n    // hence readline() will give whole input in a space seperated string\n    /** @type {Array} - num is an array of integers */\n    const num = readline().split(\" \").map(int => parseInt(int));\n    let currentInt = 0;\n    const getNextInt = () => num[currentInt++];\n\n    const n = getNextInt();\n    const arr = [];\n    for (let i = 0; i < n; i++) {\n        arr.push(getNextInt());\n    }\n    const k = getNextInt();\n    const ans = binarySearch(arr, 0, n - 1, k);\n    console.log(ans);\n}\n\nfunction binarySearch(arr, first, last, key) {\n    let mid = Math.floor((first + last) / 2);\n    while (first <= last) {\n        if (arr[mid] < key) {\n            first = mid + 1;\n        } else if (arr[mid] == key) {\n            return mid;\n        } else {\n            last = mid - 1;\n        }\n        mid = Math.floor((first + last) / 2);\n    }\n    return -1;\n}\n`;\n\nconst bs0 = { c, cpp, java, py, js };\nexport default bs0;\n","import bs0 from \"./bs0\";\n\n\nexport const correctCode = {\n    bs0\n}","import React, { Fragment, useRef, useState, useEffect } from 'react';\nimport { useParams } from 'react-router';\n\nimport classes from './Question.module.css';\nimport CodeEditorv3 from './Editor/CodeEditorv3';\nimport ButtonCustom from '../../compenents/Button/Button';\nimport useLocalStorage from '../../hooks/useLocalStorage';\nimport LoadingSpinner from '../../compenents/LoadingSpinner/LoadingSpinner';\n\nimport SendIcon from '@mui/icons-material/Send';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\n\nimport Options from './Options/Options';\nimport defaultCodes from './defaultCodes/defaultCodes';\nimport { SERVER_LINK } from '../../dev-server-link';\nimport { correctCode } from './correctCodes/index';\nimport { useSelector } from 'react-redux';\n\nconst Question = () => {\n\n    useScrollToTop();\n\n    const { id } = useParams();\n\n    const { loading, error, question } = useFetchProblems(id);\n\n    // not-initialized, submitting, submitted\n    const [codeSubmittingState, setcodeSubmittingState] = useState('not-initialized');\n\n    const [codeFontSize, setcodeFontSize] = useState(15);\n    const [selectedLang, setSelectedLang] = useLocalStorage('selectedlangoj', 'cpp');\n    const [code, setCode] = useState(defaultCodes[selectedLang]);\n    const [response, setResponse] = useState([]);\n\n    const endRef = useRef(null);\n\n    const submitHandler = async event => {\n        event.preventDefault();\n\n        if (codeSubmittingState === 'submitting') return;\n\n        console.log('submitting code');\n        setcodeSubmittingState('submitting');\n\n        try {\n            const query = await fetch(\n                `${SERVER_LINK}/api/explore/problems/${id}`,\n                {\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    method: 'POST',\n                    credentials: 'include',\n                    body: JSON.stringify({ code, language: selectedLang, testcase: question.testcase, quesName: question.name })\n                }\n            );\n            const queryData = await query.json();\n            setResponse(queryData);\n\n            if (query.ok) {\n                const intervalID = setInterval(async () => {\n                    const response = await fetch(\n                        `${SERVER_LINK}/api/explore/status/${queryData.queryId}`,\n                        {\n                            headers: {\n                                'Content-Type': 'application/json'\n                            },\n                            method: 'GET'\n                        }\n                    );\n                    const data = await response.json();\n                    if (!response.ok) {\n                        clearInterval(intervalID);\n                        setcodeSubmittingState('submitted');\n                        setResponse(data);\n                    }\n                    else if (data.status !== 'pending') {\n                        clearInterval(intervalID);\n                        setcodeSubmittingState('submitted');\n                        setResponse({ ...data.output, status: data.status });\n                    }\n                    // else console.log('status -> pending', data);\n                }, 1000);\n            }\n            else {\n                setcodeSubmittingState('submitted');\n            }\n\n            endRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\n        } catch (error) {\n            setResponse({ msg: 'caught errors while sending code to server for getting verdict', serverError: JSON.stringify(error) });\n            setcodeSubmittingState('submitted');\n        }\n    }\n\n    const resetCode = () => {\n        setCode(defaultCodes[selectedLang]);\n    }\n    const showCorrectCode = () => {\n        setCode(correctCode[question.testcase][selectedLang]);\n    }\n\n    return (\n        <Fragment>\n            {loading && <LoadingSpinner />}\n            {!loading && error && (<div>\n                <div className='errorTemplate'>\n                    <div><span>Msg : </span>Wasn't able to connect to server check if your are not offline or server might not be working !</div>\n                    {error && <div><span>Error : </span>{JSON.stringify(error)}</div>}\n                </div>\n            </div>)}\n            {!loading && !error && (\n                <div className={classes.contain}>\n                    <div className={classes.back}>\n                        <div className={classes.codeSnippet}>\n                            &#60; go back to questions /&#62;\n                        </div>\n                        <ButtonCustom to='/questions' color='yellow'>\n                            <ArrowBackIcon style={{ marginRight: '0.3em', transform: 'translateX(-12px)', fontSize: '1.2em' }} />\n                            Back\n                        </ButtonCustom>\n                    </div>\n                    <div className={classes.head}>\n                        <div style={{ display: 'inline-block' }}>\n                            <div className={classes.heading}>{question.name}</div>\n                            <div className={classes.extraContent}>\n                                <div className={classes.level} diff-color={question.difficulty}>{question.difficulty}</div>\n                                <div className={classes.succ}>{question.noOfSuccess === 0 ? 0 : ((question.noOfSuccess / question.noOfSubm * 100).toFixed(2))}%<span> Success</span></div>\n                                <div className={classes.subm}>{question.noOfSubm} <span>Submissions</span></div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className={classes.notHead}>\n                        <div className={classes.body}>\n                            <div className={classes.desc}>\n                                {question.description}\n                            </div>\n                        </div>\n                        {question.examples.map((example, index) => (\n                            <div key={index} className={classes.body}>\n                                <div className={classes.example} exn={index + 1}>\n                                    <div><span>Input : </span>{example.input}</div>\n                                    <div><span>Output : </span>{example.output}</div>\n                                    {example.explaination && <div><span>Explaination : </span>{example.explaination}</div>}\n                                </div>\n                            </div>\n                        ))}\n                        <div className={classes.editor}>\n                            <div className={classes.codeSnippet}>\n                                &#60; write your code here in <span style={{ color: 'red', textTransform: 'uppercase' }}>{selectedLang}</span> /&#62;\n                            </div>\n\n                            <Options\n                                favStyle={{\n                                    zIndex: '899',\n                                    position: 'absolute',\n                                    top: '-2rem',\n                                    right: '18%'\n                                }}\n                                resetCode={resetCode}\n                                selectedLang={selectedLang}\n                                codeFontSize={codeFontSize}\n                                setSelectedLang={setSelectedLang}\n                                setcodeFontSize={setcodeFontSize}\n                                showCorrectCode={showCorrectCode}\n                                codeEditable\n                                correctCodeAvailable={!!correctCode[question.testcase]}\n                            />\n\n                            <div className={classes.editorText}>\n                                <CodeEditorv3\n                                    selectedLang={selectedLang}\n                                    code={code}\n                                    setCode={setCode}\n                                    language={selectedLang}\n                                    fontSize={codeFontSize}\n                                />\n                            </div>\n                        </div>\n                        <div className={classes.submitBtn}>\n                            <div className={classes.codeSnippet}>\n                                &#60;&#160;\n                                {codeSubmittingState === 'submitting' ?\n                                    'wait for response' : (codeSubmittingState === 'not-initialized' ?\n                                        'click here to submit' : 'wanna submit again')}\n                                &#160;/&#62;\n                            </div>\n                            <ButtonCustom to='/' onClick={submitHandler} color='green'>\n                                {codeSubmittingState === 'submitting' ? 'Submitting' : 'Submit'}\n                                {codeSubmittingState === 'submitting' ? <div className={classes.spin} /> : <SendIcon style={{ marginLeft: '0.6em', fontSize: '1.2em' }} />}\n                            </ButtonCustom>\n                        </div>\n                        {codeSubmittingState !== 'not-initialized' && (\n                            <div className={classes.body}>\n                                <div style={{ \"--col\": (response.status === 'success' ? 127 : 0) }} className={classes.response}>\n                                    {response.msg &&\n                                        <div className={classes.resTextHead}>\n                                            <div className={classes.resHead}>Msg: </div>\n                                            <div>{response.msg}</div>\n                                        </div>\n                                    }\n                                    {response.stdout &&\n                                        <div className={classes.resTextHead}>\n                                            <div className={classes.resHead}>STDOUT: </div>\n                                            <div>{response.stdout}</div>\n                                        </div>\n                                    }\n                                    {response.stderr &&\n                                        <div className={classes.resTextHead}>\n                                            <div className={classes.resHead}>STDERR: </div>\n                                            <div>{response.stderr}</div>\n                                        </div>\n                                    }\n                                    {response.error &&\n                                        <div className={classes.resTextHead}>\n                                            <div className={classes.resHead}>Error: </div>\n                                            <div>{JSON.stringify(response.error)}</div>\n                                        </div>\n                                    }\n                                    {response.serverError &&\n                                        <div className={classes.resTextHead}>\n                                            <div className={classes.resHead}>ServerError: </div>\n                                            <div>{response.serverError.toString()}</div>\n                                        </div>\n                                    }\n                                    {response.status === 'pending' &&\n                                        <div style={{ marginTop: '2rem', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                                            <LoadingSpinner />\n                                        </div>\n                                    }\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                    <div aria-hidden ref={endRef}></div>\n                </div>\n            )}\n        </Fragment >\n    )\n}\n\nconst useFetchProblems = id => {\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(undefined);\n    const [question, setQuestion] = useState(undefined);\n\n    /** @type {Object.<string, Array>} */\n    const problems = useSelector(state => state.questions);\n\n    useEffect(() => {\n        setLoading(true);\n        setError(undefined);\n        setQuestion(undefined);\n\n        if (!problems.isLoading) {\n\n            const matchProblem = problems.questions.find(value => value._id === id);\n            if (matchProblem) setQuestion(matchProblem);\n            else setError(`No such problem found with id: ${id}`);\n\n            setLoading(false);\n        }\n\n    }, [id, problems]);\n\n    return { loading, error, question };\n}\n\n// const useFetchProblems = id => {\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(undefined);\n//     const [question, setQuestion] = useState(undefined);\n\n//     useEffect(() => {\n//         const controller = new AbortController();\n//         const signal = controller.signal;\n\n//         setLoading(true);\n//         setError(undefined);\n//         setQuestion(undefined);\n\n//         fetch(`${SERVER_LINK}/api/explore/problems/${id}`,\n//             {\n//                 headers: {\n//                     'Content-Type': 'application/json'\n//                 },\n//                 method: 'GET',\n//                 signal,\n//             })\n//             .then(async res => {\n//                 if (res.ok) return res.json()\n//                 const json = await res.json();\n//                 return await Promise.reject(json);\n//             })\n//             .then(res => {\n//                 setQuestion(res);\n//                 setLoading(false)\n//             })\n//             .catch(err => {\n//                 if (err.name === \"AbortError\") {\n//                     console.log(\"Fetch Cancelled !\");\n//                 } else {\n//                     setError(err);\n//                     setLoading(false);\n//                 }\n//             });\n\n//         return () => { controller.abort(); }\n//     }, [id]);\n\n//     return { loading, error, question };\n// }\n\nconst useScrollToTop = (dependencies = []) => {\n    useEffect(() => {\n        window.scrollTo(0, 0);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, dependencies);\n}\n\n\nexport default Question;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"\n}), 'ArrowBack');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M2.01 21 23 12 2.01 3 2 10l15 2-15 2z\"\n}), 'Send');\nexports.default = _default;"],"names":["props","handler","onClick","_jsx","Link","to","className","classes","btn","color","children","code","setCode","language","fontSize","isReadOnly","isLoading","mode","_jsxs","Fragment","style","position","zIndex","display","alignItems","pointerEvents","translate","fontWeight","marginLeft","AceEditor","placeholder","theme","name","onLoad","onChange","value","parseInt","showPrintMargin","showGutter","readOnly","highlightActiveLine","width","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","Input","styled","MuiInput","_ref","codeFontSize","setcodeFontSize","setValue","Box","sx","marginRight","Grid","container","spacing","item","TextFields","xs","Slider","handleSliderChange","event","newValue","min","max","size","target","Number","onBlur","handleBlur","inputProps","step","type","favStyle","resetCode","showCorrectCode","selectedLang","codeEditable","setSelectedLang","correctCodeAvailable","drawerOpen","toggleDrawerOpen","useState","Fab","prev","optionSnippet","top","whiteSpace","textTransform","Settings","Drawer","anchor","open","onClose","margin","optionHeading","fontSnippet","changeFont","InputSlider","changeLang","FormControl","InputLabel","id","Select","labelId","label","height","e","MenuItem","Button","variant","startIcon","RestartAltIcon","useLocalStorage","key","initialValue","jsonValue","localStorage","getItem","JSON","parse","useEffect","setItem","stringify","c","cpp","py","js","java","correctCode","bs0","useFetchProblems","loading","setLoading","error","setError","undefined","question","setQuestion","problems","useSelector","state","questions","matchProblem","find","_id","useScrollToTop","dependencies","arguments","length","window","scrollTo","Question","useParams","codeSubmittingState","setcodeSubmittingState","defaultCodes","response","setResponse","endRef","useRef","LoadingSpinner","ButtonCustom","ArrowBackIcon","transform","difficulty","noOfSuccess","noOfSubm","toFixed","description","examples","map","example","index","exn","input","output","explaination","Options","right","testcase","CodeEditorv3","async","preventDefault","console","log","query","fetch","SERVER_LINK","headers","method","credentials","body","quesName","queryData","json","ok","intervalID","setInterval","queryId","data","status","clearInterval","current","scrollIntoView","behavior","block","msg","serverError","SendIcon","stdout","stderr","toString","marginTop","justifyContent","ref","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}